package com.app.todomanagement.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SpringSecurityConfig {
	
	@Bean
	public static PasswordEncoder passwordEncoder()
	{
		return new BCryptPasswordEncoder();
	}

	//basic authentication
	@Bean
	SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception
	{
		httpSecurity.csrf().disable()
		                   .authorizeHttpRequests((authorize)->{
		                	   authorize.requestMatchers(HttpMethod.POST,"/**").hasRole("ADMIN");
		                	   authorize.requestMatchers(HttpMethod.PUT,"/**").hasRole("ADMIN");
		                	   authorize.requestMatchers(HttpMethod.DELETE,"/**").hasRole("ADMIN");
		                	   authorize.anyRequest().authenticated();})
		                   .httpBasic(Customizer.withDefaults());
		return httpSecurity.build();
	}
	
	//in-memoryAuthentication
	@Bean
	public UserDetailsService userDetailsService()
	{
		UserDetails user=User.builder()
				             .username("Vishal")
				             .password(passwordEncoder().encode("Vishal@123"))
				             .roles("USER")
				             .build();
		
		UserDetails admin=User.builder()
				              .username("admin")
				              .password(passwordEncoder().encode("admin"))
				              .roles("ADMIN")
				              .build();
		return new InMemoryUserDetailsManager(user,admin);
	}
}
